#include "constraints.h"
#include "../expression.h"

SP_constraints::SP_constraints()
{
    usage_mode = CNT_MINMAX;
    is_mutable = false;
    min = 0; max = 0;
    mut_min = 0; mut_max = 0;
    mut_power = 0;
    default_value = 0;
}

// The global constraint database
ParameterConstraintDataBase GlobalConstraints;

void init_system_constraints()
{
	GlobalConstraints.clear();

	// Just create and destroy every relevant signal once
	Signal* x;
    
    x = EvalExpr("TIME_IS", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("TIME_IS_BEFORE", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("TIME_IS_AFTER", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("TIME_IS_BETWEEN", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("NEW_DAY", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("UP", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("DOWN", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("PERCENT_UP", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("PERCENT_DOWN", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("MOVE_DIFF", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("MOVE_VAL_BEFORE", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("MOVE_PERCENT_DIFF", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("PRICE", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("VALUE_AT_TIME", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("ABS", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("NEG", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("VALUE_OF", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("PERCENT_OF", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("MIN", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("MIN_IDX", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("MAX", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("MAX_IDX", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("SUM", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("AVG", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("MIN_SINCE", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("MAX_SINCE", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("AVG_SINCE", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("SUM_SINCE", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("VALUE_OF_WHEN_FIRST_HAPPENED", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("VALUE_OF_WHEN_LAST_HAPPENED", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("INT", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("FLOAT", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("BOOL", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("HAPPENED_TODAY", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("HAPPENED_AT_TIME", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("HAPPENED_BEFORE_TIME", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("HAPPENED_AFTER_TIME", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("HAPPENED_IN_TIME_PERIOD", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("HAPPENED_BB", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("HAPPENED_LB", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("TIMES_HAPPENED", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("TIMES_HAPPENED_SINCE_LH", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("TIMES_HAPPENED_SINCE_FH", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("SEQN", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("GAP_UP", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("GAP_DOWN", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("FADE_GAP_PERCENT_PRICE", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("GAP_SIZE", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("GAP_PRICE_BEFORE", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("GAP_PRICE_AFTER", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("ENTERED_TODAY", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("EXITED_TODAY", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("BARS_SINCE_FIRST_EVENT", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("BARS_SINCE_ENTRY", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("BARS_SINCE_EXIT", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("DAYS_SINCE_ENTRY", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("DAYS_SINCE_EXIT", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("BUYING", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("SELLING", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("INSIDE_MARKET", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("OUTSIDE_MARKET", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("STOP_LOSS_HIT", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("TAKE_PROFIT_HIT", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("LAST_EXIT_REASON", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("CURRENT_PROFIT", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("LAST_PROFIT", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("CROSSES", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("CROSSES_ABOVE", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("CROSSES_BELOW", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("TIMES_IN_ROW", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("STREAK_ENDED", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("STREAK_LENGTH", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("STREAK_ENDED_PRICE_DIFF", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("PERCENT_STOP_LOSS", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("TRAILING_STOP_LOSS", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("PERCENT_TAKE_PROFIT", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("MA", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("RSI", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("ATR", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("ADX", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("CCI", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("MACD", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("SUPERTREND_UP", std::map<std::string, Signal *>());
    delete x;
    x = EvalExpr("SUPERTREND_DOWN", std::map<std::string, Signal *>());
    delete x;
}
